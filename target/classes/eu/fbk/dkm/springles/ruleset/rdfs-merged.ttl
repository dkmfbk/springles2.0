@prefix rdf:  <http://www.w3.org/1999/02/22-rdf-syntax-ns#> .
@prefix rdfs: <http://www.w3.org/2000/01/rdf-schema#> .
@prefix xsd:  <http://www.w3.org/2001/XMLSchema#> .
@prefix spr:  <http://dkm.fbk.eu/springles/ruleset#> .
@prefix spc:  <http://dkm.fbk.eu/springles/config#> .
@prefix :     <http://dkm.fbk.eu/springles/rdfs-merged#> .

spc:rdfs-merged a spr:Ruleset ;
    rdfs:label "RDFS merged inference" ;
    spr:parameterizedBy
        [ spr:name "?fullRDFS" ; spr:default "true"^^xsd:boolean ] ,
        [ spr:name "?inference_graph" ; spr:default "springles:inf"^^xsd:anyURI ] ;
    spr:prologue """
        PREFIX rdf:  <http://www.w3.org/1999/02/22-rdf-syntax-ns#>
        PREFIX rdfs: <http://www.w3.org/2000/01/rdf-schema#>
        PREFIX xsd:  <http://www.w3.org/2001/XMLSchema#> """ ;
    spr:closurePlan :plan .

:plan spr:sequenceOf ( :step-axioms :step-optimized :step-fixpoint ) .
    
:step-axioms spr:evalOf ( :rdf_axioms :rdfs_axioms :rdfs_axioms_full ) .
    
:step-optimized spr:sequenceOf (
        [ spr:evalOf ( :rdf1 ) ]
        [ spr:fixPointOf [ spr:evalOf ( :rdfs5 ) ] ]
        [ spr:evalOf ( :rdfs7 ) ]
        [ spr:evalOf ( :rdfs4a_full :rdfs4b_full
                       :rdfs2_base :rdfs2_schema
                       :rdfs3_base :rdfs3_schema1 :rdfs3_schema2 ) ]
        [ spr:fixPointOf [ spr:evalOf ( :rdfs11 ) ] ]
        [ spr:evalOf ( :rdfs9 ) ]
        [ spr:evalOf ( :rdfs12 :rdfs13 ) ]
        [ spr:evalOf ( :rdfs6 :rdfs8_full :rdfs10 ) ] ) .

:step-fixpoint spr:fixPointOf [ spr:evalOf (
        :rdfs7 :rdf1
        :rdfs2_base :rdfs2_schema
        :rdfs3_base :rdfs3_schema1 :rdfs3_schema2
        :rdfs4a_full :rdfs4b_full
        :rdfs5 :rdfs6 :rdfs8_full :rdfs9
        :rdfs10 :rdfs11 :rdfs12 :rdfs13 ) ] .

:rdf_axioms a spr:Rule ; # RDF axioms (RDF Semantics, section 3.1):
    spr:head """ GRAPH ?inference_graph {
                   rdf:type rdf:type rdf:Property.
                   rdf:subject rdf:type rdf:Property.
                   rdf:predicate rdf:type rdf:Property.
                   rdf:object rdf:type rdf:Property.
                   rdf:first rdf:type rdf:Property.
                   rdf:rest rdf:type rdf:Property.
                   rdf:value rdf:type rdf:Property.
                   rdf:_1 rdf:type rdf:Property.
                   rdf:nil rdf:type rdf:List.
                 } """ ;
    spr:body """ """ .

# RDFS axioms (section 4.2)
# note: OWLIM user guide states that last 4 axioms of are excluded outside
# fullRDFS mode, but this does not happen in OWLIM implementation
:rdfs_axioms a spr:Rule ; 
    spr:head """ GRAPH ?inference_graph {
                   rdf:type rdfs:range rdfs:Class.
                   rdfs:domain rdfs:range rdfs:Class.
                   rdfs:range rdfs:range rdfs:Class.
                   rdfs:subClassOf rdfs:range rdfs:Class.
                   rdfs:subClassOf rdfs:domain rdfs:Class. 
                   rdf:first rdfs:domain rdf:List.
                   rdf:rest rdfs:domain rdf:List.
                   rdf:rest rdfs:range rdf:List.
                   rdfs:comment rdfs:range rdfs:Literal.
                   rdfs:label rdfs:range rdfs:Literal.
                   rdf:subject rdfs:domain rdf:Statement.
                   rdf:predicate rdfs:domain rdf:Statement. 
                   rdf:object rdfs:domain rdf:Statement.
                   rdf:Alt rdfs:subClassOf rdfs:Container.
                   rdf:Bag rdfs:subClassOf rdfs:Container.
                   rdf:Seq rdfs:subClassOf rdfs:Container.
                   rdfs:Datatype rdfs:subClassOf rdfs:Class.
                   rdf:XMLLiteral rdfs:subClassOf rdfs:Literal.
                   rdf:XMLLiteral rdf:type rdfs:Datatype.
                   rdfs:isDefinedBy rdfs:subPropertyOf rdfs:seeAlso.
                   rdfs:ContainerMembershipProperty rdfs:subClassOf rdf:Property.
                   rdf:_1 rdf:type rdfs:ContainerMembershipProperty.
                   rdfs:domain rdfs:domain rdf:Property.
                   rdfs:range rdfs:domain rdf:Property.
                   rdfs:subPropertyOf rdfs:domain rdf:Property.
                   rdfs:subPropertyOf rdfs:range rdf:Property.
                 } """ ;
    spr:body """ """ .
    
# RDFS axioms (section 4.2) excluded by OWLIM
# note: OWLIM user guide states that also last 4 axioms of rdfs_axioms are
# excluded, but this does not happen
:rdfs_axioms_full a spr:Rule ;
    spr:condition "?fullRDFS" ;
    spr:head """ GRAPH ?inference_graph {
                   rdf:type rdfs:domain rdfs:Resource.
                   rdfs:member rdfs:domain rdfs:Resource.
                   rdfs:seeAlso rdfs:domain rdfs:Resource.
                   rdfs:isDefinedBy rdfs:domain rdfs:Resource.
                   rdfs:comment rdfs:domain rdfs:Resource.
                   rdfs:label rdfs:domain rdfs:Resource.
                   rdf:value rdfs:domain rdfs:Resource.
                   rdf:subject rdfs:range rdfs:Resource.
                   rdf:predicate rdfs:range rdfs:Resource.
                   rdf:object rdfs:range rdfs:Resource.
                   rdfs:member rdfs:range rdfs:Resource.
                   rdf:first rdfs:range rdfs:Resource.
                   rdfs:seeAlso rdfs:range rdfs:Resource.
                   rdfs:isDefinedBy rdfs:range rdfs:Resource.
                   rdf:value rdfs:range rdfs:Resource.                 
                   rdf:_1 rdfs:domain rdfs:Resource.
                   rdf:_1 rdfs:range rdfs:Resource.
                 } """ ;
    spr:body """ """ .

# missing: lg, gl, rdf2, rdfs1 -> required for some form of datatype reasoning

:rdf1 a spr:Rule ;
    spr:triggerOf ( :rdfs2_schema :rdfs3_schema1 :rdfs4a_full
                    :rdfs6 :rdfs7 :rdfs9 ) ;
    spr:head """ GRAPH ?inference_graph { ?p rdf:type rdf:Property } """ ;
    spr:body """ { SELECT ?p { ?s ?p ?o . } GROUP BY ?p }
                 FILTER NOT EXISTS { ?p rdf:type rdf:Property } """ .

# :rdfs2 a spr:Rule ;
#    spr:triggerOf ( :rdfs2 :rdfs3 :rdfs6 :rdfs7 :rdfs8_full :rdfs9
#                    :rdfs10 :rdfs12 :rdfs13 ) ;
#    spr:head """ GRAPH ?inference_graph { ?s rdf:type ?x } """ ;
#    spr:body """ ?p rdfs:domain ?x .
#                 FILTER(?x != rdfs:Resource)
#                 ?s ?p ?o .
#                 FILTER NOT EXISTS { ?s rdf:type ?x } """ .

:rdfs2_base a spr:Rule ;
    spr:triggerOf ( :rdfs2_schema :rdfs3_schema1 :rdfs6 :rdfs7 :rdfs8_full
                    :rdfs9 :rdfs10 :rdfs12 :rdfs13 ) ;
    spr:head """ GRAPH ?inference_graph { ?s rdf:type ?x } """ ;
    spr:body """ ?p rdfs:domain ?x .
                 FILTER(?p != rdf:type && ?p != rdfs:subClassOf &&
                        ?p != rdfs:subPropertyOf && ?x != rdfs:Resource)
                 ?s ?p ?o .
                 FILTER NOT EXISTS { ?s rdf:type ?x } """ .

:rdfs2_schema a spr:Rule ;
    spr:triggerOf ( :rdfs2_schema :rdfs3_schema1 :rdfs6 :rdfs7 :rdfs8_full
                    :rdfs9 :rdfs10 :rdfs12 :rdfs13 ) ;
    spr:head """ GRAPH ?inference_graph { ?s rdf:type ?x } """ ;
    spr:body """ ?p rdfs:domain ?x .
                 FILTER(?x != rdfs:Resource && (?p = rdf:type ||
                              ?p = rdfs:subClassOf || ?p = rdfs:subPropertyOf))
                 ?s ?p ?o .
                 FILTER NOT EXISTS { ?s rdf:type ?x } """ .

# :rdfs3 a spr:Rule ;
#    spr:triggerOf ( :rdfs2 :rdfs3 :rdfs6 :rdfs7 :rdfs8_full :rdfs9
#                    :rdfs10 :rdfs12 :rdfs13 ) ;
#    spr:head """ GRAPH ?inference_graph { ?o rdf:type ?x } """ ;
#    spr:body """ ?p rdfs:range ?x .
#                 FILTER(?x != rdfs:Resource && ?x != rdfs:Literal &&
#                      !strstarts(str(?x), 'http://www.w3.org/2001/XMLSchema#'))
#                 ?s ?p ?o .
#                 FILTER NOT EXISTS { ?o rdf:type ?x } """ .

:rdfs3_base a spr:Rule ;
    spr:triggerOf ( :rdfs2_schema :rdfs3_schema1 :rdfs6 :rdfs7 :rdfs8_full
                    :rdfs9 :rdfs10 :rdfs12 :rdfs13 ) ;
    spr:head """ GRAPH ?inference_graph { ?o rdf:type ?x } """ ;
    spr:body """ ?p rdfs:range ?x .
                 FILTER(?p != rdf:type &&
                        ?p != rdfs:subClassOf &&
                        ?p != rdfs:subPropertyOf &&
                        ?x != rdfs:Resource && ?x != rdfs:Literal &&
                        !strstarts(str(?x), 'http://www.w3.org/2001/XMLSchema#'))
                 ?s ?p ?o .
                 FILTER NOT EXISTS { ?o rdf:type ?x } """ .
                    
:rdfs3_schema1 a spr:Rule ;
    spr:triggerOf ( :rdfs2_schema :rdfs3_schema1 :rdfs6 :rdfs7 :rdfs8_full
                    :rdfs9 :rdfs10 :rdfs12 :rdfs13 ) ;
    spr:head """ GRAPH ?inference_graph { ?o rdf:type ?x } """ ;
    spr:body """ { rdf:type rdfs:range ?x .
                   FILTER (?x != rdfs:Resource && ?x != rdfs:Class)
                   [] rdf:type ?o }
                 UNION
                 { rdfs:subClassOf rdfs:range ?x .
                   FILTER (?x != rdfs:Resource)
                   [] rdfs:subClassOf ?o }
                 UNION
                 { rdfs:subPropertyOf rdfs:range ?x .
                   FILTER (?x != rdfs:Resource)
                   [] rdfs:subPropertyOf ?o }
                 FILTER NOT EXISTS { ?o rdf:type ?x } """ .
                    
:rdfs3_schema2 a spr:Rule ;
    spr:triggerOf ( :rdfs2_schema :rdfs7 :rdfs8_full :rdfs9 :rdfs10 ) ;
    spr:head """ GRAPH ?inference_graph { ?o rdf:type rdfs:Class } """ ;
    spr:body """ { SELECT ?o { [] rdf:type ?o . } GROUP BY ?o }
                 FILTER NOT EXISTS { ?o rdf:type rdfs:Class } """ .

:rdfs4a_full a spr:Rule ;
    spr:triggerOf ( :rdfs2_schema :rdfs3_schema1 :rdfs7 :rdfs9 ) ;
    spr:condition "?fullRDFS" ;
    spr:head """ GRAPH ?inference_graph { ?s rdf:type rdfs:Resource } """ ;
    spr:body """ ?s ?p ?o .
                 FILTER NOT EXISTS { ?s rdf:type rdfs:Resource } """ .

:rdfs4b_full a spr:Rule ;
    spr:triggerOf ( :rdfs2_schema :rdfs3_schema1 :rdfs7 :rdfs9 ) ;
    spr:condition "?fullRDFS" ;
    spr:head """ GRAPH ?inference_graph { ?o rdf:type rdfs:Resource } """ ;
    spr:body """ ?s ?p ?o .
                 FILTER(!isLiteral(?o))
                 FILTER NOT EXISTS { ?o ?p1 ?o1 } """ .

:rdfs5 a spr:Rule ;
    spr:triggerOf ( :rdfs2_schema :rdfs3_schema1 :rdfs5 :rdfs7 ) ;
    spr:head """ GRAPH ?inference_graph { ?p rdfs:subPropertyOf ?r } """ ;
    spr:body """ ?p rdfs:subPropertyOf ?q .
                 ?q rdfs:subPropertyOf ?r .
                 FILTER(?p != ?q && ?p != ?r && ?q != ?r)
                 FILTER NOT EXISTS { ?p rdfs:subPropertyOf ?r } """ .

:rdfs6 a spr:Rule ;
    spr:triggerOf ( :rdfs2_schema :rdfs3_schema1 ) ;
    spr:head """ GRAPH ?inference_graph { ?p rdfs:subPropertyOf ?p } """ ;
    spr:body """ ?p rdf:type rdf:Property .
                 FILTER NOT EXISTS { ?p rdfs:subPropertyOf ?p } """ .

:rdfs7 a spr:Rule ;
    spr:triggerOf ( :rdfs2_base :rdfs2_schema :rdfs3_base :rdfs3_schema1
                    :rdfs5 :rdfs6 :rdfs7 :rdfs8_full :rdfs9 :rdfs10
                    :rdfs11 :rdfs12 :rdfs13 ) ;
    spr:head """ GRAPH ?inference_graph { ?s ?q ?o } """ ;
    spr:body """ ?p rdfs:subPropertyOf ?q .
                 FILTER(?p != ?q)
                 ?s ?p ?o .
                 FILTER NOT EXISTS { ?s ?q ?o } """ .

:rdfs8_full a spr:Rule ;
    spr:triggerOf ( :rdfs2_schema :rdfs3_schema1 :rdfs7 :rdfs11 ) ;
    spr:condition "?fullRDFS" ;
    spr:head """ GRAPH ?inference_graph { ?s rdfs:subClassOf rdfs:Resource } """ ;
    spr:body """ ?s rdf:type rdfs:Class .
                 FILTER NOT EXISTS { ?s rdfs:subClassOf rdfs:Resource } """ .

:rdfs9 a spr:Rule ;
    spr:triggerOf ( :rdfs2_schema :rdfs3_schema1 :rdfs6 :rdfs7 :rdfs8_full
                    :rdfs10 :rdfs12 :rdfs13 ) ;
    spr:head """ GRAPH ?inference_graph { ?s rdf:type ?y } """ ;
    spr:body """ ?x rdfs:subClassOf ?y .
                 FILTER(?x != ?y)
                 FILTER(?y != rdfs:Resource)
                 ?s rdf:type ?x .
                 FILTER NOT EXISTS { ?s rdf:type ?y } """ .

:rdfs10 a spr:Rule ;
    spr:triggerOf ( :rdfs2_schema :rdfs3_schema1 :rdfs7 ) ;
    spr:head """ GRAPH ?inference_graph { ?s rdfs:subClassOf ?s } """ ;
    spr:body """ ?s rdf:type rdfs:Class .
                 FILTER NOT EXISTS { ?s rdfs:subClassOf ?s } """ .

:rdfs11 a spr:Rule ;
    spr:triggerOf ( :rdfs2_schema :rdfs3_schema1 :rdfs7 :rdfs9 :rdfs11 ) ;
    spr:head """ GRAPH ?inference_graph { ?x rdfs:subClassOf ?z } """ ;
    spr:body """ ?x rdfs:subClassOf ?y .
                 ?y rdfs:subClassOf ?z .
                 FILTER(?x != ?y && ?x != ?z && ?y != ?z && ?z != rdfs:Resource)
                 FILTER NOT EXISTS { ?x rdfs:subClassOf ?z } """ .

:rdfs12 a spr:Rule ;
    spr:triggerOf ( :rdfs2_schema :rdfs3_schema1 :rdfs5 :rdfs7 ) ;
    spr:head """ GRAPH ?inference_graph { ?p rdfs:subPropertyOf rdfs:member } """ ;
    spr:body """ ?p rdf:type rdfs:ContainerMembershipProperty .
                 FILTER NOT EXISTS { ?p rdfs:subPropertyOf rdfs:member } """ .

:rdfs13 a spr:Rule ;
    spr:triggerOf ( :rdfs2_schema :rdfs3_schema1 :rdfs7 :rdfs9 :rdfs11 ) ;
    spr:head """ GRAPH ?inference_graph { ?o rdfs:subClassOf rdfs:Literal } """ ;
    spr:body """ ?o rdf:type rdfs:Datatype .
                 FILTER NOT EXISTS { ?o rdfs:subClassOf rdfs:Literal } """ .
